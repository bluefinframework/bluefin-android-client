apply plugin: 'com.android.application'
apply plugin: 'android-apt'


Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (Exception e) {
    System.out.println("please add local.properties file")
}

Properties keyProperties = new Properties()
try {
    keyProperties.load(project.rootProject.file('key.properties').newDataInputStream())
} catch (Exception e) {
    System.out.println("read key.properties failed, use debug")
    keyProperties.setProperty("test", "true")
    keyProperties.setProperty("storePassword", "bluefinclient")
    keyProperties.setProperty("keyAlias", "magicbluefin")
    keyProperties.setProperty("keyPassword", "bluefinclient")
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "cn.saymagic.bluefinclient"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }


    signingConfigs {
        release {
            try {
                storeFile "true".equals(keyProperties.getProperty("test", "false")) ? project.rootProject.file("bluefin-client-test.jks") : project.rootProject.file("bluefin-client-release.jks")
                storePassword keyProperties.getProperty("storePassword", System.getenv("BLUEFIN_CLIENT_STORE_PASSWORD"))
                keyAlias keyProperties.getProperty("keyAlias", System.getenv("BLUEFIN_CLIENT_KEY_ALIAS"))
                keyPassword keyProperties.getProperty("keyPassword", System.getenv("BLUEFIN_CLIENT_KEY_PASSWORD"))
            } catch (ex) {
                logger.warning("What's up man? For release builds, you must define KEYSTORE_PASSWORD and KEY_PASSWORD.")
                ex.printStackTrace()
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:2.0.57-beta"
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile "io.reactivex:rxjava:1.1.6"
    compile "io.reactivex:rxandroid:1.2.1"
    compile "cn.saymagic:bluefinsdk:1.0.14"
    compile 'cn.saymagic:bluefinrxsdk:1.0.14'
    compile "com.github.bumptech.glide:glide:3.7.0"
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile 'cn.pedant.sweetalert:library:1.3'
}

//
//gradle.useLogger(new CustomEventLogger())
//
//class CustomEventLogger extends BuildAdapter implements TaskExecutionListener {
//
//    public void beforeExecute(Task task) {
//        println "[$task.name]"
//    }
//
//    public void afterExecute(Task task, TaskState state) {
//        println()
//    }
//
//    public void buildFinished(BuildResult result) {
//        println 'build completed'
//        if (result.failure != null) {
//            result.failure.printStackTrace()
//        }
//    }
//}